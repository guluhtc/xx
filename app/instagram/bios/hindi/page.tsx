"use client"

import { useState } from "react"
import { motion } from "framer-motion"
import { Navbar } from "@/components/navbar"
import { FooterSection } from "@/components/footer-section"
import { Crown } from "lucide-react"
import { toast } from "sonner"
import { ToolsToggle } from "@/components/instagram/tools-toggle"
import { HindiBioForm } from "@/components/bios/hindi/bio-form"
import { BioList } from "@/components/bios/bio-list"
import { HindiFeatureCards } from "@/components/bios/hindi/feature-cards"

export default function HindiBiosPage() {
  const [isGenerating, setIsGenerating] = useState(false)
  const [generatedBios, setGeneratedBios] = useState<string[]>([])
  const [isPremiumPreview, setIsPremiumPreview] = useState(true)

  const handleGenerate = async (topic: string, category: string) => {
    if (!topic) {
      toast.error("‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§µ‡§ø‡§∑‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç")
      return
    }

    setIsGenerating(true)
    try {
      // Simulated API call
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      const dummyBios = [
        "üöÄ ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡§ø‡§Ç‡§ó ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û | ‡§¨‡•ç‡§∞‡§æ‡§Ç‡§°‡•ç‡§∏ ‡§ï‡•ã ‡§ë‡§®‡§≤‡§æ‡§á‡§® ‡§¨‡§¢‡§º‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶\nüìà 5+ ‡§µ‡§∞‡•ç‡§∑‡•ã‡§Ç ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ\nüí° ‡§ü‡§ø‡§™‡•ç‡§∏ ‡§î‡§∞ ‡§∞‡§£‡§®‡•Ä‡§§‡§ø‡§Ø‡§æ‡§Ç\nüîó ‡§≤‡§ø‡§Ç‡§ï ‡§á‡§® ‡§¨‡§æ‡§Ø‡•ã",
        "üì± ‡§∏‡•ã‡§∂‡§≤ ‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§è‡§ï‡•ç‡§∏‡§™‡§∞‡•ç‡§ü | ‡§ï‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§ï‡•ç‡§∞‡§ø‡§è‡§ü‡§∞\n‚ú® ‡§ó‡•ç‡§∞‡•ã‡§• ‡§∏‡•Ä‡§ï‡•ç‡§∞‡•á‡§ü‡•ç‡§∏ ‡§∂‡•á‡§Ø‡§∞ ‡§ï‡§∞‡§§‡§æ/‡§ï‡§∞‡§§‡•Ä ‡§π‡•Ç‡§Ç\nüéØ ‡§ï‡•ã‡§≤‡•à‡§¨ ‡§ï‡•á ‡§≤‡§ø‡§è DM ‡§ï‡§∞‡•á‡§Ç\nüìç ‡§Æ‡•Å‡§Ç‡§¨‡§à, ‡§≠‡§æ‡§∞‡§§",
        "üíº ‡§¨‡§ø‡§ú‡§®‡•á‡§∏ ‡§ï‡•ã‡§ö ‡§î‡§∞ ‡§Æ‡•á‡§Ç‡§ü‡§∞\nüåü ‡§â‡§¶‡•ç‡§Ø‡§Æ‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡•ç‡§ï‡•á‡§≤ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶\nüìä ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡§ø‡§Ç‡§ó ‡§∏‡•ç‡§ü‡•ç‡§∞‡•à‡§ü‡•á‡§ú‡•Ä ‡§ú‡•ã ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à‡§Ç\nüì© ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï: ‡§à‡§Æ‡•á‡§≤@‡§â‡§¶‡§æ‡§π‡§∞‡§£.‡§ï‡•â‡§Æ"
      ]
      
      setGeneratedBios(dummyBios)
      toast.success("‡§¨‡§æ‡§Ø‡•ã ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§ø‡§è ‡§ó‡§è!")
    } catch (error) {
      toast.error("‡§¨‡§æ‡§Ø‡•ã ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤")
    } finally {
      setIsGenerating(false)
    }
  }

  const handleCopy = (text: string) => {
    navigator.clipboard.writeText(text)
    toast.success("‡§¨‡§æ‡§Ø‡•ã ‡§ï‡•ç‡§≤‡§ø‡§™‡§¨‡•ã‡§∞‡•ç‡§° ‡§™‡§∞ ‡§ï‡•â‡§™‡•Ä ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ!")
  }

  return (
    <div className="page-container">
      <Navbar />
      <main className="main-content">
        <div className="container">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="max-w-4xl mx-auto space-y-8"
          >
            <div className="text-center space-y-4">
              <h1 className="text-4xl font-bold gradient-text">‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§¨‡§æ‡§Ø‡•ã ‡§ú‡§®‡§∞‡•á‡§ü‡§∞</h1>
              <p className="text-xl text-muted-foreground">
                AI ‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§∏‡•á ‡§™‡•ç‡§∞‡•ã‡§´‡•á‡§∂‡§®‡§≤ ‡§á‡§Ç‡§∏‡•ç‡§ü‡§æ‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§¨‡§æ‡§Ø‡•ã ‡§¨‡§®‡§æ‡§è‡§Ç
              </p>
            </div>

            <ToolsToggle />

            <HindiBioForm 
              onGenerate={handleGenerate}
              isGenerating={isGenerating}
            />

            {isPremiumPreview && (
              <div className="flex items-center gap-2 text-sm text-primary">
                <Crown className="h-4 w-4" />
                <span>30 ‡§¶‡§ø‡§® ‡§ï‡§æ ‡§´‡•ç‡§∞‡•Ä ‡§ü‡•ç‡§∞‡§æ‡§Ø‡§≤</span>
              </div>
            )}

            <BioList 
              bios={generatedBios}
              onCopy={handleCopy}
            />

            <HindiFeatureCards />
          </motion.div>
        </div>
      </main>
      <FooterSection />
    </div>
  )
}